generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(student)
  instituteId   Int?
  phoneNumber   String?
  city          String?
  state         String?
  grade         String?   // Grade field for students/faculty
  streakNumber  Int       @default(0)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relationships
  institute     Institute? @relation(fields: [instituteId], references: [id], onDelete: SetNull)
  createdCourses        Course[]              @relation("CourseCreator")
  enrolledCourses       CourseEnrollment[]    // Courses user is enrolled in
  facultyStudents       FacultyStudentManagement[] @relation("Faculty")
  assignedStudents      FacultyStudentManagement[] @relation("Student")
  quizReports           QuizReport[]
  quizCodes             QuizCode[]            @relation("QuizCodeCreator")
  quizParticipants      QuizParticipant[]     
  contestParticipants   ContestParticipant[]
  aiQuizReports         AIQuizReport[]

  @@map("users")
}

model Institute {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  location    String?
  maxGrades   Int       @default(0) // Maximum number of grades allowed
  maxStudents Int       @default(0) // Maximum number of students allowed
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  users       User[]
  courses     Course[]
  facultyStudentRelations FacultyStudentManagement[]

  @@map("institutes")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  courses     Course[]

  @@map("categories")
}

model Course {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  categoryId  Int       @map("category_id")
  instituteId Int       @map("institute_id")
  grade       String    @map("grade")
  createdById Int       @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  institute   Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade)
  createdBy   User      @relation("CourseCreator", fields: [createdById], references: [id], onDelete: Cascade)
  enrolledUsers CourseEnrollment[] // Users enrolled in this course
  subtopics   Subtopic[]

  @@map("courses")
}

// Junction table for many-to-many relationship between Users and Courses
model CourseEnrollment {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  courseId    Int       @map("course_id")
  enrolledAt  DateTime  @default(now()) @map("enrolled_at")
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model Subtopic {
  id          Int       @id @default(autoincrement())
  courseId    Int       @map("course_id")
  title       String
  pptLink     String?   @map("ppt_link")
  videoLink   String?   @map("video_link")
  quizId      Int?      @map("quiz_id") @unique
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quiz        Quiz?     @relation(fields: [quizId], references: [id])

  @@map("subtopics")
}

model Quiz {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  questions   Json
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  subtopic    Subtopic?
  quizReports QuizReport[]
  quizCodes   QuizCode[]
  contest     Contest?
  participants QuizParticipant[]

  @@map("quizzes")
}

model QuizCode {
  id          Int       @id @default(autoincrement())
  quizId      Int       @map("quiz_id")
  code        String    @unique
  createdById Int       @map("created_by")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relationships
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdBy   User      @relation("QuizCodeCreator", fields: [createdById], references: [id], onDelete: Cascade)

  @@map("quiz_codes")
}

model QuizReport {
  id          Int       @id @default(autoincrement())
  quizId      Int       @map("quiz_id")
  userId      Int       @map("user_id")
  score       Int
  completed   Boolean   @default(false)
  answers     String?   // Stored as JSON string
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relationships
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_reports")
}

model QuizParticipant {
  id          Int       @id @default(autoincrement())
  quizId      Int       @map("quiz_id")
  userId      Int       @map("user_id")
  isReady     Boolean   @default(false)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relationships
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_participants")
}

model Contest {
  id          Int       @id @default(autoincrement())
  quizId      Int       @map("quiz_id") @unique
  startTime   DateTime  @map("start_time")
  endTime     DateTime  @map("end_time")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  participants ContestParticipant[]

  @@map("contests")
}

model ContestParticipant {
  id          Int       @id @default(autoincrement())
  contestId   Int       @map("contest_id")
  userId      Int       @map("user_id")
  score       Int
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relationships
  contest     Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contest_participants")
}

model AIQuizReport {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  score       Int
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_quiz_reports")
}

model FacultyStudentManagement {
  id          Int       @id @default(autoincrement())
  facultyId   Int       @map("faculty_id")
  studentId   Int       @map("student_id")
  instituteId Int       @map("institute_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relationships
  faculty     User      @relation("Faculty", fields: [facultyId], references: [id], onDelete: Cascade)
  student     User      @relation("Student", fields: [studentId], references: [id], onDelete: Cascade)
  institute   Institute @relation(fields: [instituteId], references: [id], onDelete: Cascade)

  @@unique([facultyId, studentId])
  @@map("faculty_student_management")
}

enum Role {
  admin
  institute
  faculty
  student
}